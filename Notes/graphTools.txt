Strengths and Weaknesses of Graphics Tools
* Consider ease of learning, installing and coverage of desired techniques.  
See summaryTable.csv.

Tue 4 Apr
Shiny
 - brushedPoints() seems to use a mapping from the pixels in the PNG to observation numbers in the data frame to link the brushing (based on Yu Han’s experience).  This will be ineffective (impossible?) for large data sets due to over-plotting. Seems to be inferior compared to SVG.

Crosstalk and Shiny
https://rstudio.github.io/crosstalk/
 - Achieves similar linked brushing as Plotly but requires familiarity with htmlwidgets and more programming skills (modify R binding, JavaScript binding).
 - Not appropriate for large data sets (see link).
 - Currently has specific requirements in terms of which htmlwidgets Crosstalk is appropriate for (see https://rstudio.github.io/crosstalk/authoring.html)
 - Currently not possible to select and link plots showing aggregate data (can we do this with Plotly? See: points under Plotly and Shiny).  Could be useful for large ds if difficult to brush with over plotting.

Plotly and Shiny
 - Brush and link does not work for large data sets. Not all members of the brushed subset are plotted on the linked plot.  Number of obs plotted seems fewer than those showing in the R output for the subset.  See: Brush_Link_large.R 
 - For geom_hexbin: “plotly_click” only records curveNumber and “plotly_selected” not possible (NULL subset).
 - geom_histogram() will be possible to select but will need to group ds in bins. Compare Brush_histogram.R and Brush_bar.R (works fine).
 

* Why does R or Rstudio not use SVGs for its graphics? Too expensive?


Shiny: 
http://shiny.rstudio.com/reference/shiny/latest/
 + Easy to learn and set up.
 + Aesthetically appealing output (publish-ready).
 - Limitation on interaction options (?) since only a limited number of input and output options.
 + Good for off-plot interactions (but on-plot?)
 ? Loading large data files onto the R server

R Base Graphics
 - Possible, but difficult to locate interaction (ie. click location).
 - Relatively slow at drawing graphics compared to a browser platform.

Plotly: 
https://plot.ly/r/reference/
 * ‘Interaction’ functions: plot_ly() or ggplotly().
 + Easy to use with ggplot2 (and automatically loads ggplot2).
   + With ggplot2 brings the flexibility of creating a wide range of plots.
 + Aesthetically appealing output (publish-ready).
 + Allows for collaboration in plot creation.
 + Can be used with Shiny.
 - When data points > 50 000 (eg. AQ delay data):
    - Delay in creating ‘zoom in’ selection of plot.
    - Difficulty keeping up with tooltip display.
    - Lasso/click drag selection very slow and hard to control, difficult to use for exploration.
 - Tooltip default for comparing values can only compare a maximum of 4 obs.
 + Allows for brushing (by lasso) and hence most likely linking.
 ? Can only ‘call up’ variables used in the aesthetics of the plot (?), but combined with Shiny might be able to select the vars to use in aesthetics as inputs.
 ? How to access ggplot() + geom_mosaic():  
https://cran.r-project.org/web/packages/ggmosaic/vignettes/ggmosaic.html

Plotly and Shiny:  
https://plot.ly/r/shiny-gallery/
 + Linking two Plotly graphs is possible.
 - Link must be via a variable that is common in both graphs.
 - Linked plots can only use variables that were in previous plots or called on by Shiny inputs (unable to use a diff var for colour in output plot of Brush_input).
 
Highcharts (via highchartr and htmlwidgets)
 + Purely Javascript, so easy to embed in web pages.

“On-plot” vs “off-plot” interactions
 * Shiny makes “off-plot” interactions easy (was there anything prior to Shiny?).
 * “Classical” interaction has been more focused on “on-plot” interactions (see tools described by Cook and Swayne).
 * Plotly allows for “on-plot” interactions, but limited in flexibility of linking different variables. Considerable delay for n>50000. 
 * Smooth “on-plot” interaction is hard to achieve.

* ggobi may set the benchmark of interactive techniques possible and help identify gaps.

* Tips
- Testing: Assign variable to interaction fn and print() the output.
- Colour #RRGGBB__: http://sape.inf.usi.ch/quick-reference/ggplot2/colour

	