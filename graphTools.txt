Strengths and Weaknesses of Graphics Tools
* Consider ease of learning, installing and coverage of desired techniques.  
See summaryTable.csv.

Shiny: http://shiny.rstudio.com/reference/shiny/latest/
 + Easy to learn and set up.
 + Aesthetically appealing output (publish-ready).
 - Limitation on interaction options (?) since only a limited number of input and output options.
 ? Doesn’t allow for low-level control, customisation
 ? Loading large data files onto the R server
 ? Brushing interaction possible (see link above)

R Base Graphics
 - Possible, but difficult to locate interaction (ie. click location).
 - Relatively slow at drawing graphics compared to a browser platform.

Plotly: https://plot.ly/r/reference/
 * ‘Interaction’ functions: plot_ly() or ggplotly().
 + Easy to use with ggplot2 (and automatically loads ggplot2).
   + With ggplot2 brings the flexibility of creating a wide range of plots.
 + Aesthetically appealing output (publish-ready).
 + Allows for collaboration in plot creation.
 + Can be used with Shiny.
 - When data points > 50 000 (eg. AQ delay data):
    - Delay in creating ‘zoom in’ selection of plot.
    - Difficulty keeping up with tooltip display.
 - Tooltip default for comparing values can only compare a maximum of 4 obs.
 + Allows for brushing (by lasso) and hence most likely linking.
 ? Can only ‘call up’ variables used in the aesthetics of the plot (?), but combined with Shiny might be able to select the vars to use in aesthetics as inputs.
 ? How to access ggplot() + geom_mosaic():  
https://cran.r-project.org/web/packages/ggmosaic/vignettes/ggmosaic.html

Plotly and Shiny:  https://plot.ly/r/shinyapp-linked-click/#shiny-app
 
Highcharts (via highchartr and htmlwidgets)
 + Purely Javascript, so easy to embed in web pages.

* “On the plot” interaction is better than having controls outside the plot region.
* ggobi may set the benchmark of interactive techniques possible and help identify gaps.
	